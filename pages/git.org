dev/gitlab/

* set git config to more than one repo:
** make new keys
** copy key to git server / host
** edit config file on local: 
 
#+begin_src md :results output raw
~/.ssh/config
```
Host github.com
     PreferredAuthentications publickey
     IdentityFile /home/jknoxdev/.ssh/id_ecdsa_win_ubn_2

Host gitlab.com
     PreferredAuthentications publickey
     IdentityFile ~/.ssh/id_rsa_jknoxdev_l2w
```
#+end_src

** let the clone wars begin

* set git to run with u2f on zero2f
pieced together from:

keygen:
https://rodneylab.com/using-fido-u2f-github-ssh/

```
ssh-keygen -t ecdsa-sk -C "email_used_to_signup@github.com" -f ~/.ssh/id_ecdsa_u2fknum_github
```


testing:  
https://stackoverflow.com/questions/43319094/how-do-you-find-your-gitlab-host-name-to-test-your-ssh-key

```
ssh -T git@gitlab.com
```

if you see something like this: 
```
âžœ  profile git:(gh-pages) ssh -T git@github.com
sign_and_send_pubkey: signing failed for ECDSA-SK "/home/arx/.ssh/id_ecdsa_u2fktwo_github" from agent: agent refused operation
Hi jknoxdev! You've successfully authenticated, but GitHub does not provide shell access
```

and to double check keys (https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/reviewing-your-ssh-keys)

```
ssh-add -l -E sha256
```

then, check the ~/.ssh/config file again, it is authenticating on one of the old keys.
the next step here would be to copy the keys over to each of the other machines, and then 
confirm everything works, then remove the old keys (once backed up)

